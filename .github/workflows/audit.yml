name: Weekly Code Audit

on:
  schedule:
    - cron: '0 9 * * 1' # 每周一上午9点执行 (UTC时间)
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  code-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录用于分析

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          echo "安装项目依赖..."
          npm install || pnpm install || yarn install

      - name: Install Gemini CLI
        run: |
          echo "安装 Gemini CLI..."
          npm install -g @google/gemini-cli
          echo "验证安装..."
          gemini --version || echo "Gemini CLI 版本检查失败"
          echo "测试 API 连接..."
          echo "Hello" | timeout 30s gemini || echo "API 连接测试失败"

      - name: Create audit output directories
        run: |
          mkdir -p .audit-reports
          mkdir -p public/data

      - name: Collect Code Statistics
        run: |
          echo "=== 收集代码统计信息 ==="
          
          # 统计代码行数
          echo "代码行数统计:" > .audit-reports/code-stats.txt
          find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | xargs wc -l >> .audit-reports/code-stats.txt
          
          # 统计文件数量
          echo "" >> .audit-reports/code-stats.txt
          echo "文件类型统计:" >> .audit-reports/code-stats.txt
          find src -type f | grep -E '\.(ts|tsx|js|jsx)$' | sed 's/.*\.//' | sort | uniq -c >> .audit-reports/code-stats.txt
          
          # Git 提交统计
          echo "" >> .audit-reports/code-stats.txt
          echo "最近一周提交统计:" >> .audit-reports/code-stats.txt
          git log --since="1 week ago" --oneline >> .audit-reports/code-stats.txt

      - name: Run ESLint Analysis
        run: |
          echo "=== 运行 ESLint 代码质量检查 ==="
          npx eslint src --ext .ts,.tsx,.js,.jsx --format json > .audit-reports/eslint-report.json || true
          npx eslint src --ext .ts,.tsx,.js,.jsx > .audit-reports/eslint-report.txt || true

      - name: Run TypeScript Compiler Check
        run: |
          echo "=== 运行 TypeScript 编译检查 ==="
          npx tsc --noEmit --pretty > .audit-reports/typescript-check.txt 2>&1 || true

      - name: Security Audit
        run: |
          echo "=== 运行安全审计 ==="
          npm audit --json > .audit-reports/npm-audit.json 2>&1 || true
          npm audit > .audit-reports/npm-audit.txt 2>&1 || true

      - name: Check for TODO and FIXME
        run: |
          echo "=== 检查 TODO 和 FIXME 标记 ==="
          echo "TODO 和 FIXME 列表:" > .audit-reports/todos.txt
          grep -r -n "TODO\|FIXME\|XXX\|HACK" src || echo "未发现 TODO/FIXME 标记" >> .audit-reports/todos.txt

      - name: Generate AI Code Audit Report
        run: |
          echo "=== 使用 AI 生成代码审计报告 ==="
          
          TIMESTAMP=$(date +%s)
          CURRENT_DATE=$(date '+%Y-%m-%d')
          
          # 准备审计数据
          CODE_STATS=$(cat .audit-reports/code-stats.txt 2>/dev/null || echo "无法获取代码统计")
          ESLINT_ISSUES=$(cat .audit-reports/eslint-report.txt 2>/dev/null || echo "无 ESLint 问题")
          TS_ISSUES=$(cat .audit-reports/typescript-check.txt 2>/dev/null || echo "无 TypeScript 问题")
          SECURITY_ISSUES=$(cat .audit-reports/npm-audit.txt 2>/dev/null || echo "无安全问题")
          TODO_LIST=$(cat .audit-reports/todos.txt 2>/dev/null || echo "无 TODO 标记")
          
          # 获取最近的代码变更
          RECENT_CHANGES=$(git log --since="1 week ago" --pretty=format:"%h - %s (%an, %ar)" | head -10 || echo "无最近变更")
          
          PROMPT="请为我生成一个详细的代码审计报告，格式为 Markdown。报告日期：$CURRENT_DATE

          请基于以下信息进行分析：

          ## 代码统计信息
          \`\`\`
          $CODE_STATS
          \`\`\`

          ## ESLint 检查结果
          \`\`\`
          $ESLINT_ISSUES
          \`\`\`

          ## TypeScript 编译检查
          \`\`\`
          $TS_ISSUES
          \`\`\`

          ## 安全审计结果
          \`\`\`
          $SECURITY_ISSUES
          \`\`\`

          ## TODO/FIXME 标记
          \`\`\`
          $TODO_LIST
          \`\`\`

          ## 最近代码变更
          \`\`\`
          $RECENT_CHANGES
          \`\`\`

          请生成一个包含以下部分的 Markdown 报告：
          1. 执行摘要
          2. 代码质量评估
          3. 安全问题分析
          4. 性能建议
          5. 技术债务识别
          6. 改进建议
          7. 优先级排序的行动项

          请确保报告专业、详细且具有可操作性。时间戳：$TIMESTAMP"

                    # 生成 AI 审计报告
                    MAX_RETRIES=3
                    RETRY_COUNT=0
                    SUCCESS=false
                    
                    while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
                      echo "尝试第 $((RETRY_COUNT + 1)) 次生成审计报告..."
                      
                      timeout 180s bash -c "echo '$PROMPT' | gemini" > /tmp/audit_output.txt 2>&1
                      EXIT_CODE=$?
                      
                      OUTPUT=$(cat /tmp/audit_output.txt 2>/dev/null || echo "")
                      
                      if [ $EXIT_CODE -eq 0 ] && [ ${#OUTPUT} -gt 1000 ]; then
                        echo "✅ AI 审计报告生成成功"
                        
                        # 清理输出并保存
                        echo "$OUTPUT" | sed '/^```markdown/d' | sed '/^```$/d' | sed '/^```/d' > .audit-reports/ai-audit-report.md
                        
                        # 添加报告头部信息并保存到 public/data
                        cat > public/data/weekly-audit-report.md << EOF
          # 代码审计报告

          **生成时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **审计周期**: $(date -d '7 days ago' '+%Y-%m-%d') 至 $(date '+%Y-%m-%d')  
          **项目**: $(basename $(pwd))  

          ---

          EOF
                        cat .audit-reports/ai-audit-report.md >> public/data/weekly-audit-report.md
              
              # 同时保留一份在 .audit-reports 目录用于内部处理
              cp public/data/weekly-audit-report.md .audit-reports/weekly-audit-report.md
              
              SUCCESS=true
            else
              echo "❌ AI 审计报告生成失败，退出码: $EXIT_CODE"
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((30 + RETRY_COUNT * 30))
                echo "等待 $WAIT_TIME 秒后重试..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          # 如果 AI 生成失败，创建基础报告
          if [ "$SUCCESS" = "false" ]; then
            echo "⚠️ AI 生成失败，创建基础审计报告..."
            cat > public/data/weekly-audit-report.md << EOF
          # 代码审计报告

          **生成时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **审计周期**: $(date -d '7 days ago' '+%Y-%m-%d') 至 $(date '+%Y-%m-%d')  
          **项目**: $(basename $(pwd))  
          **状态**: 基础报告 (AI 分析暂时不可用)

          ## 执行摘要

          本周代码审计已完成基础检查，详细分析请查看各项检查结果。

          ## 代码统计

          \`\`\`
          $CODE_STATS
          \`\`\`

          ## ESLint 检查结果

          \`\`\`
          $ESLINT_ISSUES
          \`\`\`

          ## TypeScript 检查结果

          \`\`\`
          $TS_ISSUES
          \`\`\`

          ## 安全审计结果

          \`\`\`
          $SECURITY_ISSUES
          \`\`\`

          ## TODO/FIXME 标记

          \`\`\`
          $TODO_LIST
          \`\`\`

          ## 最近变更

          \`\`\`
          $RECENT_CHANGES
          \`\`\`

          ---
          *报告由自动化系统生成*
          EOF
            # 同时保留一份在 .audit-reports 目录用于内部处理
            cp public/data/weekly-audit-report.md .audit-reports/weekly-audit-report.md
          fi
          
          rm -f /tmp/audit_output.txt
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Create GitHub Issue for Critical Issues
        run: |
          echo "=== 检查是否需要创建 GitHub Issue ==="
          
          # 检查是否有严重问题
          CRITICAL_ISSUES=false
          
          # 检查高危安全漏洞
          if grep -q "high\|critical" .audit-reports/npm-audit.txt 2>/dev/null; then
            CRITICAL_ISSUES=true
            echo "发现高危安全漏洞"
          fi
          
          # 检查 TypeScript 错误
          if grep -q "error" .audit-reports/typescript-check.txt 2>/dev/null; then
            CRITICAL_ISSUES=true
            echo "发现 TypeScript 编译错误"
          fi
          
          if [ "$CRITICAL_ISSUES" = "true" ]; then
            echo "NEED_ISSUE=true" >> $GITHUB_ENV
            echo "发现严重问题，将创建 GitHub Issue"
          else
            echo "NEED_ISSUE=false" >> $GITHUB_ENV
            echo "未发现严重问题"
          fi

      - name: Create Issue for Critical Problems
        if: env.NEED_ISSUE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditReport = fs.readFileSync('public/data/weekly-audit-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 代码审计发现严重问题 - ${new Date().toISOString().split('T')[0]}`,
              body: `## 自动代码审计警报

            本次代码审计发现了需要立即关注的严重问题。

            ### 审计报告摘要

            ${auditReport.substring(0, 2000)}...

            [查看完整报告](public/data/weekly-audit-report.md)

            ### 建议行动

            1. 立即检查安全漏洞
            2. 修复 TypeScript 编译错误
            3. 审查代码质量问题

            ---
            *此 Issue 由自动化代码审计系统创建*`,
                          labels: ['audit', 'critical', 'automated']
                        });



      - name: Commit Audit Reports
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "📊 Weekly Code Audit Report - $(date '+%Y-%m-%d')"
          file_pattern: "public/data/weekly-audit-report.md"
          commit_user_name: "Code Audit Bot"
          commit_user_email: "code-audit-bot@users.noreply.github.com"

      - name: Summary
        run: |
          echo "=== 审计完成摘要 ==="
          echo "✅ 代码统计分析完成"
          echo "✅ ESLint 质量检查完成"
          echo "✅ TypeScript 编译检查完成"
          echo "✅ 安全漏洞扫描完成"
          echo "✅ TODO/FIXME 标记检查完成"
          echo "✅ AI 审计报告生成完成"
          echo ""
          echo "📊 报告文件:"
          ls -la .audit-reports/
          echo ""
          echo "🔍 查看详细报告: public/data/weekly-audit-report.md"