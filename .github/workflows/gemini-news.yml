name: Generate Daily News

on:
  schedule:
    - cron: '0 22 * * *' # Runs at 22:00 UTC, which is 6:00 AM Beijing time
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-news:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 增加超时时间到 15 分钟
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Gemini CLI
        run: |
          echo "安装 Gemini CLI..."
          npm install -g @google/gemini-cli
          echo "验证安装..."
          if gemini --version; then
            echo "✅ Gemini CLI 安装成功"
          else
            echo "❌ Gemini CLI 安装失败"
            exit 1
          fi
          echo "测试 API 连接..."
          if timeout 20s bash -c "echo 'test' | gemini --model=gemini-1.5-flash" > /tmp/test.txt 2>&1; then
            echo "✅ API 连接测试成功"
          else
            echo "⚠️ API 连接测试失败，但继续执行"
            cat /tmp/test.txt | head -3
          fi
          rm -f /tmp/test.txt
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      - name: Create output directory
        run: mkdir -p public/data

      - name: Check API availability
        run: |
          echo "=== 检查 Gemini API 可用性 ==="
          
          # 创建简单测试 prompt
          echo "Hello, please respond with 'API is working'" > /tmp/test_prompt.txt
          
          # 快速 API 健康检查
          if timeout 15s bash -c "cat /tmp/test_prompt.txt | gemini --model=gemini-1.5-flash" > /tmp/api_test.txt 2>&1; then
            echo "✅ API 连接正常"
            echo "响应预览: $(cat /tmp/api_test.txt | head -1 | cut -c1-100)..."
          else
            echo "⚠️ API 连接异常，但继续尝试生成"
            echo "错误信息: $(cat /tmp/api_test.txt | head -3)"
          fi
          
          rm -f /tmp/api_test.txt /tmp/test_prompt.txt
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Generate and save daily news
        run: |
          echo "=== 开始生成24小时内新闻 ==="
          
          CURRENT_DATE=$(date '+%Y年%m月%d日')
          CURRENT_TIME=$(date '+%H:%M UTC')
          
          echo "当前日期: $CURRENT_DATE"
          echo "当前时间: $CURRENT_TIME"
          
          # 创建 prompt 文件
          cat > /tmp/prompt.txt << 'PROMPT_EOF'
          Generate TOP 10 global breaking news from past 24 hours. Use this exact format:

          # Global Breaking News TOP10 / 全球热点新闻TOP10

          **Date**: CURRENT_DATE_PLACEHOLDER
          **Update Time**: CURRENT_TIME_PLACEHOLDER
          **Data Source**: English Mainstream Media / 英文主流媒体综合

          ---

          ### 1. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 2. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 3. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 4. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 5. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 6. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 7. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 8. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 9. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ### 10. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Source**: [Media Name]

          ---

          *This news summary is generated by AI for reference only. / 本新闻摘要由AI自动生成，仅供参考。*

          Requirements: Recent news only, brief summaries, reliable sources. Please generate complete content for all 10 news items.
          PROMPT_EOF

          # 替换占位符
          sed -i "s/CURRENT_DATE_PLACEHOLDER/$CURRENT_DATE/g" /tmp/prompt.txt
          sed -i "s/CURRENT_TIME_PLACEHOLDER/$CURRENT_TIME/g" /tmp/prompt.txt
          
          # 改进的重试机制
          MAX_RETRIES=2
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
            echo "尝试第 $((RETRY_COUNT + 1)) 次生成..."
            
            # 分步骤处理，减少超时风险
            echo "步骤 1: 准备 API 调用..."
            
            # 使用文件输入方式调用 Gemini CLI
            timeout 120s bash -c "cat /tmp/prompt.txt | gemini --model=gemini-1.5-flash" > /tmp/gemini_output.txt 2>&1
            EXIT_CODE=$?
            
            # 读取输出内容
            OUTPUT=$(cat /tmp/gemini_output.txt 2>/dev/null || echo "")
            
            echo "API 调用退出码: $EXIT_CODE"
            echo "输出长度: ${#OUTPUT} 字符"
            echo "输出内容预览:"
            echo "--- 开始 ---"
            echo "$OUTPUT" | head -10
            echo "--- 结束 ---"
            
            # 更严格的错误检查
            if [ $EXIT_CODE -eq 124 ]; then
              echo "❌ API 调用超时 (120秒)"
            elif [ $EXIT_CODE -ne 0 ]; then
              echo "❌ API 调用失败，退出码: $EXIT_CODE"
              echo "错误输出前5行:"
              echo "$OUTPUT" | head -5
            elif [ -z "$OUTPUT" ]; then
              echo "❌ API 返回空内容"
            elif echo "$OUTPUT" | grep -qi "error\|failed\|exception\|unavailable\|timeout\|rate.*limit\|quota.*exceeded"; then
              echo "❌ API 返回错误信息:"
              echo "$OUTPUT" | head -5
            elif echo "$OUTPUT" | grep -q "I'm ready\|What would you like"; then
              echo "❌ API 返回默认提示，未处理请求"
            else
              echo "✅ API 调用成功，处理输出..."
              
              # 清理和验证输出
              echo "$OUTPUT" | sed 's/^```[a-z]*//g' | sed 's/^```$//g' | sed '/^$/N;/^\n$/d' > public/data/daily-news.md
              
              if [ -s "public/data/daily-news.md" ]; then
                FILE_SIZE=$(wc -c < public/data/daily-news.md)
                LINE_COUNT=$(wc -l < public/data/daily-news.md)
                
                echo "生成文件: $FILE_SIZE 字节, $LINE_COUNT 行"
                
                # 验证内容结构 - 适应 TOP10 格式
                if [ $FILE_SIZE -gt 1000 ] && [ $LINE_COUNT -gt 40 ]; then
                  if grep -q "# Global Breaking News TOP10\|# 全球热点新闻TOP10" public/data/daily-news.md && \
                     grep -q "### 1\." public/data/daily-news.md && \
                     grep -q "### 5\." public/data/daily-news.md && \
                     grep -q "### 10\." public/data/daily-news.md; then
                    echo "✅ 内容验证通过"
                    SUCCESS=true
                    break
                  else
                    echo "❌ 内容结构不完整"
                    echo "文件预览:"
                    head -8 public/data/daily-news.md
                  fi
                else
                  echo "❌ 文件太小: $FILE_SIZE 字节, $LINE_COUNT 行"
                fi
              else
                echo "❌ 生成文件为空"
              fi
            fi
            
            # 准备重试
            if [ "$SUCCESS" = "false" ]; then
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((30 + RETRY_COUNT * 15))
                echo "等待 $WAIT_TIME 秒后重试..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          # 清理临时文件
          rm -f /tmp/gemini_output.txt /tmp/prompt.txt
          
          # 最终处理
          if [ "$SUCCESS" = "false" ]; then
            echo "❌ 所有重试失败，创建状态报告"
            
            cat > public/data/daily-news.md << 'EOF'
            # 新闻服务状态报告

            **生成时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
            **状态**: API 服务暂时不可用

            ## 服务信息

            Gemini API 当前遇到连接问题，可能原因：
            - API 服务器临时过载
            - 网络连接超时
            - API 配额限制

            ## 技术详情

            ```
            重试次数: 2
            超时设置: 120秒
            模型: gemini-1.5-flash
            ```

            ## 解决方案

            1. 系统将在下次定时任务自动重试
            2. 如持续失败，请检查 API 密钥配置
            3. 考虑调整生成时间或模型参数

            ---
            *此报告由自动化系统生成 / Generated by automated system*
            EOF
            
            # 替换变量
            sed -i "s/\$(date '+%Y-%m-%d %H:%M:%S UTC')/$(date '+%Y-%m-%d %H:%M:%S UTC')/g" public/data/daily-news.md
            
            echo "✅ 状态报告已创建"
          else
            echo "✅ 新闻生成成功"
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Create fallback content if needed
        run: |
          echo "=== 检查是否需要创建备用内容 ==="
          
          if [ ! -f "public/data/daily-news.md" ] || [ ! -s "public/data/daily-news.md" ]; then
            echo "⚠️ 主要生成失败，创建备用新闻内容"
            
            cat > public/data/daily-news.md << 'EOF'
            # Global Breaking News / 全球热点新闻

            **Date**: $(date '+%Y年%m月%d日')
            **Update Time**: $(date '+%H:%M UTC')
            **Status**: Service Temporarily Unavailable / 服务暂时不可用

            ---

            ## Service Notice / 服务通知

            The automated news generation service is currently experiencing technical difficulties with the AI API. This is typically a temporary issue that resolves within a few hours.

            新闻自动生成服务当前遇到AI接口技术问题。这通常是临时性问题，会在几小时内解决。

            ### What's happening / 当前状况
            - AI API connection timeout / AI接口连接超时
            - Retry mechanism activated / 重试机制已激活
            - Next attempt scheduled / 下次尝试已安排

            ### Expected resolution / 预期解决时间
            The service will automatically retry during the next scheduled run at 22:00 UTC (06:00 Beijing time).

            服务将在下次计划运行时间22:00 UTC（北京时间06:00）自动重试。

            ---

            *This notice is generated automatically when the primary news service is unavailable.*  
            *此通知在主要新闻服务不可用时自动生成。*
            EOF
            
            # 替换变量
            sed -i "s/\$(date '+%Y年%m月%d日')/$(date '+%Y年%m月%d日')/g" public/data/daily-news.md
            sed -i "s/\$(date '+%H:%M UTC')/$(date '+%H:%M UTC')/g" public/data/daily-news.md
            
            echo "✅ 备用内容已创建"
          else
            echo "✅ 主要内容存在，无需备用内容"
          fi

      - name: Check if content has changed
        run: |
          echo "=== Content Change Detection ==="
          
          # 检查是否有现有文件
          if [ -f "public/data/daily-news.md" ]; then
            # 保存新生成的文件到临时位置
            cp public/data/daily-news.md /tmp/new_daily_news.md
            
            # 获取当前仓库中的文件
            if git show HEAD:public/data/daily-news.md > /tmp/current_daily_news.md 2>/dev/null; then
              echo "✅ 成功获取当前仓库文件"
            else
              echo "⚠️  无法获取当前仓库文件，可能是新文件"
              echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
              exit 0
            fi
            
            # 计算哈希值
            NEW_HASH=$(sha256sum /tmp/new_daily_news.md | cut -d' ' -f1)
            CURRENT_HASH=$(sha256sum /tmp/current_daily_news.md | cut -d' ' -f1)
            
            echo "新生成文件哈希: $NEW_HASH"
            echo "当前文件哈希: $CURRENT_HASH"
            echo "新文件大小: $(wc -c < /tmp/new_daily_news.md) bytes"
            echo "当前文件大小: $(wc -c < /tmp/current_daily_news.md) bytes"
            echo "新文件行数: $(wc -l < /tmp/new_daily_news.md) lines"
            echo "当前文件行数: $(wc -l < /tmp/current_daily_news.md) lines"
            
            # 显示内容差异
            echo ""
            echo "=== 内容差异比较 ==="
            if diff -q /tmp/new_daily_news.md /tmp/current_daily_news.md > /dev/null; then
              echo "❌ 文件内容完全相同，跳过提交"
              echo "CONTENT_CHANGED=false" >> $GITHUB_ENV
            else
              echo "✅ 文件内容有差异，继续提交"
              echo "差异详情："
              diff -u /tmp/current_daily_news.md /tmp/new_daily_news.md || true
              echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
            fi
            
            # 清理临时文件
            rm -f /tmp/new_daily_news.md /tmp/current_daily_news.md
          else
            echo "✅ 新文件，继续提交"
            echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Verify file content
        run: |
          echo "=== 文件内容验证 ==="
          if [ -f "public/data/daily-news.md" ]; then
            FILE_SIZE=$(wc -c < public/data/daily-news.md)
            LINE_COUNT=$(wc -l < public/data/daily-news.md)
            echo "文件大小: $FILE_SIZE 字节"
            echo "文件行数: $LINE_COUNT 行"
            echo ""
            echo "文件内容预览 (前20行):"
            head -20 public/data/daily-news.md
            echo ""
            if [ $LINE_COUNT -gt 20 ]; then
              echo "... (共 $LINE_COUNT 行，显示前20行)"
            fi
          else
            echo "❌ 文件不存在: public/data/daily-news.md"
          fi

      - name: Show commit status
        run: |
          if [ "$CONTENT_CHANGED" = "true" ]; then
            echo "✅ 准备提交更改..."
          else
            echo "⏭️  跳过提交 - 内容没有变化"
          fi

      - name: Commit and push the generated file
        if: env.CONTENT_CHANGED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "AI Generate Daily News"
          file_pattern: "public/data/daily-news.md"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions-bot@users.noreply.github.com"