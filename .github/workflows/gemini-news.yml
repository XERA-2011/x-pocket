name: Generate Daily News

on:
  schedule:
    - cron: '0 22 * * *' # Runs at 22:00 UTC, which is 6:00 AM Beijing time
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-news:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # 设置整个 job 的超时时间为 5 分钟
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Gemini CLI
        run: |
          echo "安装 Gemini CLI..."
          npm install -g @google/gemini-cli
          echo "验证安装..."
          gemini --version || echo "Gemini CLI 版本检查失败"
          echo "测试 API 连接..."
          echo "Hello" | timeout 30s gemini || echo "API 连接测试失败"
      - name: Create output directory
        run: mkdir -p public/data

      - name: Check API availability
        run: |
          echo "=== 检查 Gemini API 可用性 ==="
          
          # 简单的 API 健康检查
          echo "测试基本 API 连接..."
          if timeout 30s bash -c "echo 'test' | gemini" > /tmp/api_test.txt 2>&1; then
            echo "✅ API 基本连接正常"
            cat /tmp/api_test.txt | head -5
          else
            echo "⚠️  API 连接测试失败，但继续尝试生成"
            cat /tmp/api_test.txt | head -10
          fi
          
          rm -f /tmp/api_test.txt

      - name: Generate and save daily news
        run: |
          echo "=== 开始生成24小时内新闻 ==="
          
          CURRENT_DATE=$(date '+%Y年%m月%d日')
          CURRENT_TIME=$(date '+%H:%M UTC')
          
          echo "当前日期: $CURRENT_DATE"
          echo "当前时间: $CURRENT_TIME"
          
          # 简化的 prompt，减少生成时间
          PROMPT="Please provide TOP10 global breaking news from the past 24 hours, sourced exclusively from English mainstream media.

          Please return strictly in the following format:

          # Global Breaking News TOP10 / 全球热点新闻TOP10

          **Date**: $CURRENT_DATE  
          **Update Time**: $CURRENT_TIME  
          **Data Source**: English Mainstream Media / 英文主流媒体综合  

          ---

          ### 1. **[English Title]** / **[中文标题]**
          - **Keywords**: [English Keywords] / [中文关键词]
          - **Content**: [English Summary] / [中文摘要]
          - **Published**: [Date]
          - **Source**: [Media Name]

          ---

          (Continue generating news 2-10 in the same format)

          ---

          *This news summary is generated by AI for reference only. / 本新闻摘要由AI自动生成，仅供参考。*

          Requirements:
          1. All news must be from the past 24 hours
          2. Sources limited to English mainstream media only
          3. Each news summary no more than 2 sentences
          4. Ranked by importance
          5. Focus on politics, economics, international relations"
          
          # 改进的重试机制 - 增加超时时间和重试次数
          MAX_RETRIES=2
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
            echo "尝试第 $((RETRY_COUNT + 1)) 次生成..."
            
            # 增加超时时间到 300 秒 (5分钟)
            timeout 300s bash -c "echo '$PROMPT' | gemini" > /tmp/gemini_output.txt 2>&1
            EXIT_CODE=$?
            
            # 读取输出内容
            OUTPUT=$(cat /tmp/gemini_output.txt 2>/dev/null || echo "")
            
            echo "API 调用退出码: $EXIT_CODE"
            echo "输出长度: ${#OUTPUT} 字符"
            
            # 检查各种错误情况
            if [ $EXIT_CODE -eq 124 ]; then
              echo "❌ API 调用超时 (300秒)"
              echo "输出内容预览:"
              echo "$OUTPUT" | head -5
            elif [ $EXIT_CODE -ne 0 ]; then
              echo "❌ API 调用失败，退出码: $EXIT_CODE"
              echo "错误输出:"
              echo "$OUTPUT" | head -10
            elif [ -z "$OUTPUT" ]; then
              echo "❌ API 返回空内容"
            elif echo "$OUTPUT" | grep -qi "error\|failed\|exception\|apiError\|status.*500\|internal.*error\|unavailable\|timeout"; then
              echo "❌ API 返回错误信息:"
              echo "$OUTPUT" | head -10
            elif echo "$OUTPUT" | grep -q "I'm ready. What would you like me to do?"; then
              echo "❌ API 返回默认提示信息，未正确处理请求"
            else
              # 处理成功的输出
              echo "✅ API 调用成功，处理输出内容..."
              
              # 清理输出并保存到文件
              echo "$OUTPUT" | sed '/^```markdown/d' | sed '/^```$/d' | sed '/^```/d' > public/data/daily-news.md
              
              # 验证生成的文件
              if [ -s "public/data/daily-news.md" ]; then
                FILE_SIZE=$(wc -c < public/data/daily-news.md)
                LINE_COUNT=$(wc -l < public/data/daily-news.md)
                
                echo "生成文件大小: $FILE_SIZE 字节"
                echo "生成文件行数: $LINE_COUNT 行"
                
                # 调整验证标准，适应 TOP10 格式
                if [ $FILE_SIZE -gt 1000 ] && [ $LINE_COUNT -gt 30 ]; then
                  if grep -q "# 全球热点新闻TOP10" public/data/daily-news.md && grep -q "### 1\." public/data/daily-news.md; then
                    echo "✅ 内容生成成功，包含预期结构"
                    SUCCESS=true
                    break
                  else
                    echo "❌ 生成的内容缺少预期结构"
                    echo "文件内容预览:"
                    head -10 public/data/daily-news.md
                  fi
                else
                  echo "❌ 生成的文件太小或行数不足"
                  echo "文件内容预览:"
                  head -10 public/data/daily-news.md
                fi
              else
                echo "❌ 生成的文件为空或不存在"
              fi
            fi
            
            # 如果未成功，准备重试
            if [ "$SUCCESS" = "false" ]; then
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                # 指数退避策略 - 减少等待时间
                WAIT_TIME=$((20 + RETRY_COUNT * 20))
                echo "等待 $WAIT_TIME 秒后重试..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          # 清理临时文件
          rm -f /tmp/gemini_output.txt
          
          # 最终检查
          if [ "$SUCCESS" = "false" ]; then
            echo "❌ 达到最大重试次数 ($MAX_RETRIES)，API 持续失败"
            echo "🔄 创建服务状态报告..."
            
            # 创建服务状态报告而不是让工作流失败
            cat > public/data/daily-news.md << EOF
          # 新闻服务状态报告

          **生成时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **状态**: API 服务暂时不可用  

          ## 服务信息

          Gemini API 当前遇到超时或服务器错误，这通常是临时性问题。

          ## 错误详情

          \`\`\`
          重试次数: $MAX_RETRIES
          最后错误: API 超时或服务器错误
          超时设置: 300秒
          \`\`\`

          ## 下次生成

          系统将在下次定时任务中自动重试生成24小时内新闻内容。

          ---
          *此报告由自动化系统生成*
          EOF
            
            echo "✅ 已创建服务状态报告"
            # 不要 exit 1，让工作流继续执行以提交状态报告
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Check if content has changed
        run: |
          echo "=== Content Change Detection ==="
          
          # 检查是否有现有文件
          if [ -f "public/data/daily-news.md" ]; then
            # 保存新生成的文件到临时位置
            cp public/data/daily-news.md /tmp/new_daily_news.md
            
            # 获取当前仓库中的文件
            if git show HEAD:public/data/daily-news.md > /tmp/current_daily_news.md 2>/dev/null; then
              echo "✅ 成功获取当前仓库文件"
            else
              echo "⚠️  无法获取当前仓库文件，可能是新文件"
              echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
              exit 0
            fi
            
            # 计算哈希值
            NEW_HASH=$(sha256sum /tmp/new_daily_news.md | cut -d' ' -f1)
            CURRENT_HASH=$(sha256sum /tmp/current_daily_news.md | cut -d' ' -f1)
            
            echo "新生成文件哈希: $NEW_HASH"
            echo "当前文件哈希: $CURRENT_HASH"
            echo "新文件大小: $(wc -c < /tmp/new_daily_news.md) bytes"
            echo "当前文件大小: $(wc -c < /tmp/current_daily_news.md) bytes"
            echo "新文件行数: $(wc -l < /tmp/new_daily_news.md) lines"
            echo "当前文件行数: $(wc -l < /tmp/current_daily_news.md) lines"
            
            # 显示内容差异
            echo ""
            echo "=== 内容差异比较 ==="
            if diff -q /tmp/new_daily_news.md /tmp/current_daily_news.md > /dev/null; then
              echo "❌ 文件内容完全相同，跳过提交"
              echo "CONTENT_CHANGED=false" >> $GITHUB_ENV
            else
              echo "✅ 文件内容有差异，继续提交"
              echo "差异详情："
              diff -u /tmp/current_daily_news.md /tmp/new_daily_news.md || true
              echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
            fi
            
            # 清理临时文件
            rm -f /tmp/new_daily_news.md /tmp/current_daily_news.md
          else
            echo "✅ 新文件，继续提交"
            echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Verify file content
        run: |
          echo "=== 文件内容验证 ==="
          if [ -f "public/data/daily-news.md" ]; then
            FILE_SIZE=$(wc -c < public/data/daily-news.md)
            LINE_COUNT=$(wc -l < public/data/daily-news.md)
            echo "文件大小: $FILE_SIZE 字节"
            echo "文件行数: $LINE_COUNT 行"
            echo ""
            echo "文件内容预览 (前20行):"
            head -20 public/data/daily-news.md
            echo ""
            if [ $LINE_COUNT -gt 20 ]; then
              echo "... (共 $LINE_COUNT 行，显示前20行)"
            fi
          else
            echo "❌ 文件不存在: public/data/daily-news.md"
          fi

      - name: Show commit status
        run: |
          if [ "$CONTENT_CHANGED" = "true" ]; then
            echo "✅ 准备提交更改..."
          else
            echo "⏭️  跳过提交 - 内容没有变化"
          fi

      - name: Commit and push the generated file
        if: env.CONTENT_CHANGED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "AI Generate Daily News"
          file_pattern: "public/data/daily-news.md"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions-bot@users.noreply.github.com"