name: Generate Essay Markdown

on:
  schedule:
    - cron: '0 18 * * *' # Runs at 18:00 UTC, which is 2:00 AM Beijing time
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-essay-md:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Gemini CLI
        run: |
          echo "安装 Gemini CLI..."
          npm install -g @google/gemini-cli
          echo "验证安装..."
          gemini --version || echo "Gemini CLI 版本检查失败"
          echo "测试 API 连接..."
          echo "Hello" | timeout 30s gemini || echo "API 连接测试失败"
      - name: Create output directory
        run: mkdir -p public/data

      - name: Check API availability
        run: |
          echo "=== 检查 Gemini API 可用性 ==="
          
          # 简单的 API 健康检查
          echo "测试基本 API 连接..."
          if timeout 30s bash -c "echo 'test' | gemini" > /tmp/api_test.txt 2>&1; then
            echo "✅ API 基本连接正常"
            cat /tmp/api_test.txt | head -5
          else
            echo "⚠️  API 连接测试失败，但继续尝试生成"
            cat /tmp/api_test.txt | head -10
          fi
          
          rm -f /tmp/api_test.txt

      - name: Generate and save essay examples
        run: |
          echo "=== 开始生成 PET 作文 ==="
          
          # 添加时间戳和随机元素来避免缓存
          TIMESTAMP=$(date +%s)
          RANDOM_ID=$(echo $RANDOM)
          
          # 为两种作文类型创建不同的主题列表
          TOPICS_EMAIL=("An email to a friend about a party you are organizing" "A postcard from your holiday telling a friend what you are doing" "An email to a hotel asking for information about their rooms and prices" "A thank-you letter to a relative for a birthday present they sent you" "An email invitation to a school event you are helping with" "An email to your English teacher explaining why you missed a class" "A postcard to your family describing a place you are visiting" "An email to a shop to complain about a product you bought" "An email to a friend recommending a book you have just read" "A letter to a new penfriend introducing yourself" "An email to a sports club to ask about membership" "A postcard inviting your cousin to stay with you for a weekend" "An email to a friend apologizing for something you did" "A letter to a magazine giving your opinion on an article" "An email to a company applying for a part-time job" "A postcard from a city you've just moved to" "An email to a friend giving them directions to your house" "A thank-you email to a friend who helped you with a problem" "An email to a cinema to book tickets for a film" "A letter to the school principal suggesting an improvement")
          TOPICS_STORY=("Write a story about a surprising event that happened at school" "An article for the school magazine about your favorite hobby" "Write a story that begins with the sentence: 'The door opened slowly and I couldn't believe who I saw.'" "An article for a website about the benefits of regular exercise" "A story about a memorable journey you took with your family" "Write a story about finding something mysterious in your garden" "An article about the importance of protecting the environment" "Write a story that ends with the sentence: 'It was the best day of my life.'" "An article describing your favorite festival and why you enjoy it" "A story about a time you learned an important lesson" "Write a story about a funny misunderstanding" "An article for young people about how to use social media safely" "A story about a pet that did something amazing" "Write a story that begins with: 'I knew it was a bad idea, but I did it anyway.'" "An article about your favorite film and why others should watch it" "A story about helping someone in need" "Write a story about an unexpected visitor" "An article about a famous person you admire" "A story about a dream that came true" "Write a story that ends with: 'I would never forget that day.'")
          
          SELECTED_TOPIC_EMAIL=${TOPICS_EMAIL[$((RANDOM % ${#TOPICS_EMAIL[@]}))]}
          SELECTED_TOPIC_STORY=${TOPICS_STORY[$((RANDOM % ${#TOPICS_STORY[@]}))]}
          
          echo "时间戳: $TIMESTAMP"
          echo "随机ID: $RANDOM_ID"
          echo "选定邮件/明信片主题: $SELECTED_TOPIC_EMAIL"
          echo "选定故事/文章主题: $SELECTED_TOPIC_STORY"
          
          PROMPT="请为我生成一个Markdown格式的文件内容，该文件应包含两篇符合 PET (B1 Preliminary) 考试写作要求的英语作文（每篇约100词）及其翻译。\n\n第一篇是应用文，主题是：'$SELECTED_TOPIC_EMAIL'。\n第二篇是记叙文或短文，主题是：'$SELECTED_TOPIC_STORY'。\n\n请严格遵循以下格式，不要包含任何额外的解释或代码块标记。请直接输出 Markdown 内容。\n\n# 应用文\n\n## $SELECTED_TOPIC_EMAIL\n- [此处为主题 '$SELECTED_TOPIC_EMAIL' 的中文翻译]\n\n**正文**：\n\n[作文一的英文正文]\n\n- [作文一的中文翻译，翻译的每个段落都另起一行并以'- '开头]\n\n---\n\n# 记叙文/短文\n\n## $SELECTED_TOPIC_STORY\n- [此处为主题 '$SELECTED_TOPIC_STORY' 的中文翻译]\n\n**正文**：\n\n[作文二的英文正文]\n\n- [作文二的中文翻译，翻译的每个段落都另起一行并以'- '开头]\n\n请确保只输出纯净的Markdown内容。当前时间戳：$TIMESTAMP，随机ID：$RANDOM_ID。请确保生成的内容是独特的。"
          
          # 改进的重试机制
          MAX_RETRIES=2
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
            echo "尝试第 $((RETRY_COUNT + 1)) 次生成..."
            
            # 使用timeout命令限制执行时间，避免长时间挂起
            timeout 120s bash -c "echo '$PROMPT' | gemini" > /tmp/gemini_output.txt 2>&1
            EXIT_CODE=$?
            
            # 读取输出内容
            OUTPUT=$(cat /tmp/gemini_output.txt 2>/dev/null || echo "")
            
            echo "API 调用退出码: $EXIT_CODE"
            echo "输出长度: ${#OUTPUT} 字符"
            
            # 检查各种错误情况
            if [ $EXIT_CODE -eq 124 ]; then
              echo "❌ API 调用超时 (120秒)"
            elif [ $EXIT_CODE -ne 0 ]; then
              echo "❌ API 调用失败，退出码: $EXIT_CODE"
            elif [ -z "$OUTPUT" ]; then
              echo "❌ API 返回空内容"
            elif echo "$OUTPUT" | grep -qi "error\|failed\|exception\|apiError\|status.*500\|internal.*error\|unavailable\|timeout"; then
              echo "❌ API 返回错误信息:"
              echo "$OUTPUT" | head -10
            elif echo "$OUTPUT" | grep -q "I'm ready. What would you like me to do?"; then
              echo "❌ API 返回默认提示信息，未正确处理请求"
            else
              # 处理成功的输出
              echo "✅ API 调用成功，处理输出内容..."
              
              # 清理输出并保存到文件
              echo "$OUTPUT" | sed '/^```markdown/d' | sed '/^```$/d' | sed '/^```/d' > public/data/pet-essays.md
              
              # 验证生成的文件
              if [ -s "public/data/pet-essays.md" ]; then
                FILE_SIZE=$(wc -c < public/data/pet-essays.md)
                LINE_COUNT=$(wc -l < public/data/pet-essays.md)
                
                echo "生成文件大小: $FILE_SIZE 字节"
                echo "生成文件行数: $LINE_COUNT 行"
                
                # 检查文件内容是否包含预期的结构
                if [ $FILE_SIZE -gt 500 ] && [ $LINE_COUNT -gt 10 ]; then
                  if grep -q "# 应用文" public/data/pet-essays.md && grep -q "# 记叙文" public/data/pet-essays.md; then
                    echo "✅ 内容生成成功，包含预期结构"
                    SUCCESS=true
                    break
                  else
                    echo "❌ 生成的内容缺少预期结构"
                  fi
                else
                  echo "❌ 生成的文件太小或行数不足"
                fi
              else
                echo "❌ 生成的文件为空或不存在"
              fi
            fi
            
            # 如果未成功，准备重试
            if [ "$SUCCESS" = "false" ]; then
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                # 指数退避策略
                WAIT_TIME=$((30 + RETRY_COUNT * 30))
                echo "等待 $WAIT_TIME 秒后重试..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          # 清理临时文件
          rm -f /tmp/gemini_output.txt
          
          # 最终检查
          if [ "$SUCCESS" = "false" ]; then
            echo "❌ 达到最大重试次数 ($MAX_RETRIES)，API 持续失败"
            echo "🔄 创建服务状态报告..."
            
            # 创建服务状态报告而不是让工作流失败
            cat > public/data/pet-essays.md << EOF
          # PET 作文生成服务状态报告

          **生成时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **状态**: API 服务暂时不可用  
          **时间戳**: $TIMESTAMP  
          **随机ID**: $RANDOM_ID  

          ## 服务信息

          Gemini API 当前遇到内部服务器错误 (HTTP 500)，这通常是临时性问题。

          **预定主题**:
          - 邮件/明信片: $SELECTED_TOPIC_EMAIL
          - 故事/文章: $SELECTED_TOPIC_STORY

          ## 错误详情

          \`\`\`
          重试次数: $MAX_RETRIES
          最后错误: API 内部服务器错误
          错误代码: 500
          \`\`\`

          ## 下次生成

          系统将在下次定时任务中自动重试生成内容。

          ---
          *此报告由自动化系统生成*
          EOF
            
            echo "✅ 已创建服务状态报告"
            # 不要 exit 1，让工作流继续执行以提交状态报告
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Check if content has changed
        run: |
          echo "=== Content Change Detection ==="
          
          # 检查是否有现有文件
          if [ -f "public/data/pet-essays.md" ]; then
            # 保存新生成的文件到临时位置
            cp public/data/pet-essays.md /tmp/new_pet_essays.md
            
            # 获取当前仓库中的文件
            if git show HEAD:public/data/pet-essays.md > /tmp/current_pet_essays.md 2>/dev/null; then
              echo "✅ 成功获取当前仓库文件"
            else
              echo "⚠️  无法获取当前仓库文件，可能是新文件"
              echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
              exit 0
            fi
            
            # 计算哈希值
            NEW_HASH=$(sha256sum /tmp/new_pet_essays.md | cut -d' ' -f1)
            CURRENT_HASH=$(sha256sum /tmp/current_pet_essays.md | cut -d' ' -f1)
            
            echo "新生成文件哈希: $NEW_HASH"
            echo "当前文件哈希: $CURRENT_HASH"
            echo "新文件大小: $(wc -c < /tmp/new_pet_essays.md) bytes"
            echo "当前文件大小: $(wc -c < /tmp/current_pet_essays.md) bytes"
            echo "新文件行数: $(wc -l < /tmp/new_pet_essays.md) lines"
            echo "当前文件行数: $(wc -l < /tmp/current_pet_essays.md) lines"
            
            # 显示内容差异
            echo ""
            echo "=== 内容差异比较 ==="
            if diff -q /tmp/new_pet_essays.md /tmp/current_pet_essays.md > /dev/null; then
              echo "❌ 文件内容完全相同，跳过提交"
              echo "CONTENT_CHANGED=false" >> $GITHUB_ENV
            else
              echo "✅ 文件内容有差异，继续提交"
              echo "差异详情："
              diff -u /tmp/current_pet_essays.md /tmp/new_pet_essays.md || true
              echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
            fi
            
            # 清理临时文件
            rm -f /tmp/new_pet_essays.md /tmp/current_pet_essays.md
          else
            echo "✅ 新文件，继续提交"
            echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Verify file content
        run: |
          echo "=== 文件内容验证 ==="
          if [ -f "public/data/pet-essays.md" ]; then
            FILE_SIZE=$(wc -c < public/data/pet-essays.md)
            LINE_COUNT=$(wc -l < public/data/pet-essays.md)
            echo "文件大小: $FILE_SIZE 字节"
            echo "文件行数: $LINE_COUNT 行"
            echo ""
            echo "文件内容预览 (前20行):"
            head -20 public/data/pet-essays.md
            echo ""
            if [ $LINE_COUNT -gt 20 ]; then
              echo "... (共 $LINE_COUNT 行，显示前20行)"
            fi
          else
            echo "❌ 文件不存在: public/data/pet-essays.md"
          fi

      - name: Show commit status
        run: |
          if [ "$CONTENT_CHANGED" = "true" ]; then
            echo "✅ 准备提交更改..."
          else
            echo "⏭️  跳过提交 - 内容没有变化"
          fi

      - name: Commit and push the generated file
        if: env.CONTENT_CHANGED == 'true'  # 移除 success() 条件，允许提交服务状态报告
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "AI Generate"
          file_pattern: "public/data/pet-essays.md"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions-bot@users.noreply.github.com"
